// Copyright 2018 Google, Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file in the root of the source
// tree.

package layers

import (
	"reflect"
	"testing"

	"github.com/google/gopacket"
)

// checkFTP() uses the ftp.go code to analyse the packet bytes as an FTP TCP
// packet and generate an FTP object. It then compares the generated FTP object
// with the one provided and throws an error if there is any difference.
// The desc argument is output with any failure message to identify the test.
func checkFTP(desc string, t *testing.T, packetBytes []byte, pExpectedFTP *FTP) {

	// Analyse the packet bytes, yielding a new packet object p.
	p := gopacket.NewPacket(packetBytes, LinkTypeEthernet, gopacket.DecodeStreamsAsDatagrams)
	if p.ErrorLayer() != nil {
		t.Errorf("Failed to decode packet %s: %v", desc, p.ErrorLayer().Error())
	}

	// Ensure that the packet analysis yielded the correct set of layers:
	//    Link Layer        = Ethernet.
	//    Network Layer     = IPv4.
	//    Transport Layer   = TCP.
	//    Application Layer = FTP.
	checkLayers(p, []gopacket.LayerType{
		LayerTypeEthernet,
		LayerTypeIPv4,
		LayerTypeTCP,
		LayerTypeFTP}, t)

	// Select the Application (FTP) layer.
	pResultFTP, ok := p.ApplicationLayer().(*FTP)
	if !ok {
		t.Error("No FTP layer type found in packet in " + desc + ".")
	}

	// Compare the generated FTP object with the expected FTP object.
	if !reflect.DeepEqual(pResultFTP, pExpectedFTP) {
		t.Errorf("FTP packet processing failed for packet "+desc+
			":\ngot  :\n%#v\n\nwant :\n%#v\n\n", pResultFTP, pExpectedFTP)
	}

	testSerialization(t, p, packetBytes)
}

func TestFTPOne(t *testing.T) {

	//   21:31:27.287857 IP 192.168.1.231.21 > 192.168.1.182.62014: Flags [P.], seq 1:71, ack 1, win 1448, options [nop,nop,TS val 1022798250 ecr 512575478], length 70: FTP: 220 ProFTPD 1.3.0a Server (ProFTPD Anonymous Server) [192.168.1.231]
	//   	0x0000:  0017 f22e 523b 0013 209f 042f 0800 4510  ....R;...../..E.
	//   	0x0010:  007a e65e 4000 4006 cf21 c0a8 01e7 c0a8  .z.^@.@..!......
	//   	0x0020:  01b6 0015 f23e 836f 4ffe 0484 6eda 8018  .....>.oO...n...
	//   	0x0030:  05a8 9967 0000 0101 080a 3cf6 a9aa 1e8d  ...g......<.....
	//   	0x0040:  47f6 3232 3020 5072 6f46 5450 4420 312e  G.220.ProFTPD.1.
	//   	0x0050:  332e 3061 2053 6572 7665 7220 2850 726f  3.0a.Server.(Pro
	//   	0x0060:  4654 5044 2041 6e6f 6e79 6d6f 7573 2053  FTPD.Anonymous.S
	//   	0x0070:  6572 7665 7229 205b 3139 322e 3136 382e  erver).[192.168.
	//   	0x0080:  312e 3233 315d 0d0a                      1.231]..
	var testPacketFTP = []byte{
		0x00, 0x17, 0xf2, 0x2e, 0x52, 0x3b, 0x00, 0x13, 0x20, 0x9f, 0x04, 0x2f, 0x08, 0x00, 0x45, 0x10,
		0x00, 0x7a, 0xe6, 0x5e, 0x40, 0x00, 0x40, 0x06, 0xcf, 0x21, 0xc0, 0xa8, 0x01, 0xe7, 0xc0, 0xa8,
		0x01, 0xb6, 0x00, 0x15, 0xf2, 0x3e, 0x83, 0x6f, 0x4f, 0xfe, 0x04, 0x84, 0x6e, 0xda, 0x80, 0x18,
		0x05, 0xa8, 0x99, 0x67, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x3c, 0xf6, 0xa9, 0xaa, 0x1e, 0x8d,
		0x47, 0xf6, 0x32, 0x32, 0x30, 0x20, 0x50, 0x72, 0x6f, 0x46, 0x54, 0x50, 0x44, 0x20, 0x31, 0x2e,
		0x33, 0x2e, 0x30, 0x61, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x28, 0x50, 0x72, 0x6f,
		0x46, 0x54, 0x50, 0x44, 0x20, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x53,
		0x65, 0x72, 0x76, 0x65, 0x72, 0x29, 0x20, 0x5b, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e,
		0x31, 0x2e, 0x32, 0x33, 0x31, 0x5d, 0x0d, 0x0a,
	}

	pExpectedFTP := &FTP{
		BaseLayer: BaseLayer{
			Contents: []byte{
				0x32, 0x32, 0x30, 0x20, 0x50, 0x72, 0x6f, 0x46, 0x54, 0x50, 0x44, 0x20, 0x31, 0x2e, 0x33, 0x2e,
				0x30, 0x61, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x28, 0x50, 0x72, 0x6f, 0x46, 0x54,
				0x50, 0x44, 0x20, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x53, 0x65, 0x72,
				0x76, 0x65, 0x72, 0x29, 0x20, 0x5b, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x31, 0x2e,
				0x32, 0x33, 0x31, 0x5d, 0x0d, 0x0a,
			},
			Payload: nil,
		},
		IsResponse:     true,
		ResponseCode:   220,
		ResponseStatus: "ProFTPD 1.3.0a Server (ProFTPD Anonymous Server) [192.168.1.231]",
		Delimiter:      " ",
	}

	checkFTP("test01", t, testPacketFTP, pExpectedFTP)
}

func TestFTPMultilineStatus(t *testing.T) {
	//   21:31:33.341984 IP 192.168.1.231.21 > 192.168.1.182.62014: Flags [P.], seq 217:257, ack 33, win 1448, options [nop,nop,TS val 1022799764 ecr 512575490], length 40: FTP: 211-Features:
	//   	0x0000:  0017 f22e 523b 0013 209f 042f 0800 4510  ....R;...../..E.
	//   	0x0010:  005c e665 4000 4006 cf38 c0a8 01e7 c0a8  .\.e@.@..8......
	//   	0x0020:  01b6 0015 f23e 836f 50d6 0484 6efa 8018  .....>.oP...n...
	//   	0x0030:  05a8 278c 0000 0101 080a 3cf6 af94 1e8d  ..'.......<.....
	//   	0x0040:  4802 3231 312d 4665 6174 7572 6573 3a0a  H.211-Features:.
	//   	0x0050:  204d 4454 4d0a 2052 4553 5420 5354 5245  .MDTM..REST.STRE
	//   	0x0060:  414d 0a20 5349 5a45 0d0a                 AM..SIZE..
	var testPacketFTP = []byte{
		0x00, 0x17, 0xf2, 0x2e, 0x52, 0x3b, 0x00, 0x13, 0x20, 0x9f, 0x04, 0x2f, 0x08, 0x00, 0x45, 0x10,
		0x00, 0x5c, 0xe6, 0x65, 0x40, 0x00, 0x40, 0x06, 0xcf, 0x38, 0xc0, 0xa8, 0x01, 0xe7, 0xc0, 0xa8,
		0x01, 0xb6, 0x00, 0x15, 0xf2, 0x3e, 0x83, 0x6f, 0x50, 0xd6, 0x04, 0x84, 0x6e, 0xfa, 0x80, 0x18,
		0x05, 0xa8, 0x27, 0x8c, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x3c, 0xf6, 0xaf, 0x94, 0x1e, 0x8d,
		0x48, 0x02, 0x32, 0x31, 0x31, 0x2d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x3a, 0x0a,
		0x20, 0x4d, 0x44, 0x54, 0x4d, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x54, 0x20, 0x53, 0x54, 0x52, 0x45,
		0x41, 0x4d, 0x0a, 0x20, 0x53, 0x49, 0x5a, 0x45, 0x0d, 0x0a,
	}
	pExpectedFTP := &FTP{
		BaseLayer: BaseLayer{
			Contents: []byte{
				0x32, 0x31, 0x31, 0x2d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x3a, 0x0a, 0x20, 0x4d,
				0x44, 0x54, 0x4d, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x54, 0x20, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
				0x0a, 0x20, 0x53, 0x49, 0x5a, 0x45, 0x0d, 0x0a,
			},
			Payload: nil,
		},
		IsResponse:     true,
		ResponseCode:   211,
		ResponseStatus: "Features:\n MDTM\n REST STREAM\n SIZE",
		Delimiter:      "-",
	}
	checkFTP("multiline", t, testPacketFTP, pExpectedFTP)
}
func TestFTPCommand(t *testing.T) {
	//   21:32:44.097478 IP 192.168.1.182.62014 > 192.168.1.231.21: Flags [P.], seq 228:255, ack 1122, win 65535, options [nop,nop,TS val 512575631 ecr 1022816220], length 27: FTP: SITE CHMOD 777 resume.doc
	//   	0x0000:  0013 209f 042f 0017 f22e 523b 0800 4510  ...../....R;..E.
	//   	0x0010:  004f 1d36 4000 4006 9875 c0a8 01b6 c0a8  .O.6@.@..u......
	//   	0x0020:  01e7 f23e 0015 0484 6fbd 836f 545f 8018  ...>....o..oT_..
	//   	0x0030:  ffff 3689 0000 0101 080a 1e8d 488f 3cf6  ..6.........H.<.
	//   	0x0040:  efdc 5349 5445 2043 484d 4f44 2037 3737  ..SITE.CHMOD.777
	//   	0x0050:  2072 6573 756d 652e 646f 630d 0a         .resume.doc..
	var testPacketFTP = []byte{
		0x00, 0x13, 0x20, 0x9f, 0x04, 0x2f, 0x00, 0x17, 0xf2, 0x2e, 0x52, 0x3b, 0x08, 0x00, 0x45, 0x10,
		0x00, 0x4f, 0x1d, 0x36, 0x40, 0x00, 0x40, 0x06, 0x98, 0x75, 0xc0, 0xa8, 0x01, 0xb6, 0xc0, 0xa8,
		0x01, 0xe7, 0xf2, 0x3e, 0x00, 0x15, 0x04, 0x84, 0x6f, 0xbd, 0x83, 0x6f, 0x54, 0x5f, 0x80, 0x18,
		0xff, 0xff, 0x36, 0x89, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x1e, 0x8d, 0x48, 0x8f, 0x3c, 0xf6,
		0xef, 0xdc, 0x53, 0x49, 0x54, 0x45, 0x20, 0x43, 0x48, 0x4d, 0x4f, 0x44, 0x20, 0x37, 0x37, 0x37,
		0x20, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x2e, 0x64, 0x6f, 0x63, 0x0d, 0x0a,
	}
	pExpectedFTP := &FTP{
		BaseLayer: BaseLayer{
			Contents: []byte{
				0x53, 0x49, 0x54, 0x45, 0x20, 0x43, 0x48, 0x4d, 0x4f, 0x44, 0x20, 0x37, 0x37, 0x37, 0x20, 0x72,
				0x65, 0x73, 0x75, 0x6d, 0x65, 0x2e, 0x64, 0x6f, 0x63, 0x0d, 0x0a,
			},
			Payload: nil,
		},
		Delimiter:  " ",
		Command:    FTPCommandSite,
		CommandArg: "CHMOD 777 resume.doc",
	}
	checkFTP("command", t, testPacketFTP, pExpectedFTP)
}
