package layers

import (
	"testing"

	"github.com/google/gopacket"
)

// https://github.com/tintinweb/scapy-ssl_tls/blob/master/tests/files/RSA_WITH_AES_128_CBC_SHA.pcap
// WARNING! Tests are specific for each packet. If you change a packet, please review their tests.

// Packet 4 - Client Hello (full packet, from Ethernet to TLS layers)
var testClientHello = []byte{
	0x00, 0x0c, 0x29, 0x1f, 0xab, 0x17, 0x00, 0x50, 0x56, 0xc0, 0x00, 0x08, 0x08, 0x00, 0x45, 0x00,
	0x00, 0xfe, 0x71, 0x42, 0x40, 0x00, 0x80, 0x06, 0x4e, 0xe1, 0xc0, 0xa8, 0xdc, 0x01, 0xc0, 0xa8,
	0xdc, 0x83, 0x2f, 0x0e, 0x01, 0xbb, 0x25, 0x6c, 0xbd, 0x3d, 0xcc, 0xce, 0xe1, 0xf7, 0x50, 0x18,
	0xff, 0xff, 0x7c, 0xaf, 0x00, 0x00, 0x16, 0x03, 0x01, 0x00, 0xd1, 0x01, 0x00, 0x00, 0xcd, 0x03,
	0x01, 0xff, 0xa2, 0x88, 0x97, 0x7c, 0x41, 0xa1, 0x08, 0x34, 0x2c, 0x98, 0xc2, 0x70, 0x04, 0xa0,
	0x5d, 0x5f, 0x39, 0xef, 0xe0, 0x70, 0xd5, 0x12, 0xf1, 0x35, 0x17, 0xb6, 0x0d, 0xc4, 0xd3, 0x09,
	0x85, 0x00, 0x00, 0x5a, 0xc0, 0x14, 0xc0, 0x0a, 0x00, 0x39, 0x00, 0x38, 0x00, 0x88, 0x00, 0x87,
	0xc0, 0x0f, 0xc0, 0x05, 0x00, 0x35, 0x00, 0x84, 0xc0, 0x13, 0xc0, 0x09, 0x00, 0x33, 0x00, 0x32,
	0x00, 0x9a, 0x00, 0x99, 0x00, 0x45, 0x00, 0x44, 0xc0, 0x0e, 0xc0, 0x04, 0x00, 0x2f, 0x00, 0x96,
	0x00, 0x41, 0xc0, 0x11, 0xc0, 0x07, 0xc0, 0x0c, 0xc0, 0x02, 0x00, 0x05, 0x00, 0x04, 0xc0, 0x12,
	0xc0, 0x08, 0x00, 0x16, 0x00, 0x13, 0xc0, 0x0d, 0xc0, 0x03, 0x00, 0x0a, 0x00, 0x15, 0x00, 0x12,
	0x00, 0x09, 0x00, 0x14, 0x00, 0x11, 0x00, 0x08, 0x00, 0x06, 0x00, 0x03, 0x00, 0xff, 0x02, 0x01,
	0x00, 0x00, 0x49, 0x00, 0x0b, 0x00, 0x04, 0x03, 0x00, 0x01, 0x02, 0x00, 0x0a, 0x00, 0x34, 0x00,
	0x32, 0x00, 0x0e, 0x00, 0x0d, 0x00, 0x19, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x18, 0x00, 0x09, 0x00,
	0x0a, 0x00, 0x16, 0x00, 0x17, 0x00, 0x08, 0x00, 0x06, 0x00, 0x07, 0x00, 0x14, 0x00, 0x15, 0x00,
	0x04, 0x00, 0x05, 0x00, 0x12, 0x00, 0x13, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x0f, 0x00,
	0x10, 0x00, 0x11, 0x00, 0x23, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x01, 0x01,
}

// Packet 13 - Two Application Data Records
var testDoubleAppData = []byte{
	0x17, 0x03, 0x01, 0x00, 0x20, 0x77, 0x3a, 0x94, 0x7d, 0xb4, 0x47, 0x4a, 0x1d, 0xd4, 0x6c, 0x5a,
	0x69, 0x74, 0x03, 0x93, 0x32, 0xca, 0x54, 0x5e, 0xa5, 0x81, 0x99, 0x6a, 0x73, 0x66, 0xbf, 0x06,
	0xa0, 0xdc, 0x6a, 0x9c, 0xb1, 0x17, 0x03, 0x01, 0x00, 0x20, 0x44, 0x64, 0xc8, 0xc2, 0x5a, 0xfc,
	0x4a, 0x82, 0xdd, 0x53, 0x6d, 0x30, 0x82, 0x4d, 0x35, 0x22, 0xf1, 0x5f, 0x3b, 0x96, 0x66, 0x79,
	0x61, 0x9f, 0x51, 0x93, 0x1b, 0xbf, 0x53, 0x3b, 0xf8, 0x26,
}

var testAlertEncrypted = []byte{
	0x15, 0x03, 0x03, 0x00, 0x20, 0x44, 0xb9, 0x9c, 0x2c, 0x6e, 0xab, 0xa3, 0xdf, 0xb1, 0x77, 0x04,
	0xa2, 0xa4, 0x3a, 0x9a, 0x08, 0x1d, 0xe6, 0x51, 0xac, 0xa0, 0x5f, 0xab, 0x74, 0xa7, 0x96, 0x24,
	0xfe, 0x62, 0xfe, 0xe8, 0x5e,
}

// Malformed TLS records
var testMalformed = []byte{
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
}

func TestPacketTLS(t *testing.T) {
	p := gopacket.NewPacket(testClientHello, LinkTypeEthernet, testDecodeOptions)
	if p.ErrorLayer() != nil {
		t.Error("Failed to decode packet:", p.ErrorLayer().Error())
	}

	checkLayers(p, []gopacket.LayerType{LayerTypeEthernet, LayerTypeIPv4, LayerTypeTCP, LayerTypeTLS}, t)
}

func TestParseTLSContentType(t *testing.T) {
	p := gopacket.NewPacket(testClientHello, LinkTypeEthernet, testDecodeOptions)
	if p.ErrorLayer() != nil {
		t.Error("Failed to decode packet:", p.ErrorLayer().Error())
	}
	checkLayers(p, []gopacket.LayerType{LayerTypeEthernet, LayerTypeIPv4, LayerTypeTCP, LayerTypeTLS}, t)

	r := p.Layer(LayerTypeTLS).(*TLS).Handshake
	if len(r) != 1 {
		t.Errorf("Wrong number of handshake records, expected 1, got %d", len(r))
	}

	ct := r[0].ContentType
	if ct != TLShandshake {
		t.Errorf("Failed to parse Content Type, expected %q, got %q", TLShandshake.String(), ct.String())
	}
}

func TestParseTLSAppData(t *testing.T) {
	p := gopacket.NewPacket(testDoubleAppData, LayerTypeTLS, testDecodeOptions)
	if p.ErrorLayer() != nil {
		t.Error("Failed to decode packet:", p.ErrorLayer().Error())
	}
	checkLayers(p, []gopacket.LayerType{LayerTypeTLS}, t)

	r := p.Layer(LayerTypeTLS).(*TLS).Appdata
	if len(r) != 2 {
		t.Errorf("Wrong number of application data records, expected 2, got %d", len(r))
	}

	d1 := r[0].Payload
	l1 := len(d1)
	if l1 != 32 {
		t.Errorf("Wrong payoad length of application data record one, expected 32, got %d", l1)
	}
	if d1[0] != 0x77 || d1[l1-1] != 0xb1 {
		t.Error("Wrong content on application data record one")
	}

	d2 := r[1].Payload
	l2 := len(d2)
	if l2 != 32 {
		t.Errorf("Wrong payoad length of application data record two, expected 32, got %d", l1)
	}
	if d2[0] != 0x44 || d2[l2-1] != 0x26 {
		t.Error("Wrong content on application data record two")
	}
}

func TestParseTLSMalformed(t *testing.T) {
	p := gopacket.NewPacket(testMalformed, LayerTypeTLS, testDecodeOptions)
	if p.ErrorLayer() == nil {
		t.Error("No Decoding Error when parsing a malformed data")
	}
}

func TestParseTLSTooShort(t *testing.T) {
	p := gopacket.NewPacket(testMalformed[0:2], LayerTypeTLS, testDecodeOptions)
	if p.ErrorLayer() == nil {
		t.Error("No Decoding Error when parsing a malformed data")
	}
}

func TestParseTLSLengthMismatch(t *testing.T) {
	var testLengthMismatch = make([]byte, len(testDoubleAppData))
	copy(testLengthMismatch, testDoubleAppData)
	testLengthMismatch[3] = 0xFF
	testLengthMismatch[4] = 0xFF
	p := gopacket.NewPacket(testLengthMismatch, LayerTypeTLS, testDecodeOptions)
	if p.ErrorLayer() == nil {
		t.Error("No Decoding Error when parsing a malformed data")
	}
}

func TestParseTLSAlertEncrypted(t *testing.T) {
	p := gopacket.NewPacket(testAlertEncrypted, LayerTypeTLS, testDecodeOptions)
	if p.ErrorLayer() != nil {
		t.Error("Failed to decode packet:", p.ErrorLayer().Error())
	}
	checkLayers(p, []gopacket.LayerType{LayerTypeTLS}, t)

	r := p.Layer(LayerTypeTLS).(*TLS).Alert
	if len(r) != 1 {
		t.Errorf("Wrong number of alert records, expected 1, got %d", len(r))
	}

	l := r[0].Level
	d := r[0].Description
	if l.String() != "Unknown" || d.String() != "Unknown" {
		t.Error("Alert packet should be Encrypted")
	}
	msg := r[0].EncryptedMsg
	if len(msg) == 0 {
		t.Errorf("Wrong Encrypted Message length on alert record, expected 0, got %d", len(msg))
	}
}
